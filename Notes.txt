====== Project Notes ======
I need to set the events array for the calendar to something like this:
<code>
events='[
            {"title" : "event1", "start" : "2017-08-06T09:00:00", "end" : "2017-08-06T09:30:00", "otherStuff" : "This working?"},
            {"title" : "event1", "start" : "2017-08-06T14:00:00", "end" : "2017-08-06T14:30:00", "otherStuff" : "This working also?"},
            {"title" : "event2", "start" : "2017-08-15T12:30:00", "end" : "2017-08-15T13:30:00", "otherStuff" : "This working too?"}
            ]'
</code>
In this example I got two for the same day.

===== Problems with the calendar =====
  * Uses "9p" for 9PM, I need another format.
    * Fixed with locale.
  * Doesn't show the end time for events. Though I'm not certain I actually need it.
    * Solved. I need the "week view."
  * Error in console: Uncaught TypeError: Cannot read property 'addEventListener' of null at setTimeout (scheduler-component.html:262)
  * The text is in english, though that may be because my OS is in english as well. I need to check that.
    * Fixed with locale.
  * A scollbar appears in agendaWeek view mode. I already have the document scrollbar, that's too many scrollbars. This is supposed to be fixed on the latest commit (not the latest version), I might be able to apply the "fix" myself.
    * Fixed by using the last version of the component as a submodule in src.

===== The start / end issue =====
The scheduler-component saves time in a special object type. Thing is I have to give start and end as a String to my other components.

To show it like so:
2017-10-06T09:00:00

I can use: e.detail.calEvent.start.format() (assuming I'm in a click event related to the scheduler-component).

I'm not sure if it is the classic JS Date object, doesn't look like it is.

I can format manually using start.day, start.hour, etc.

In my custom components I could reference the parsed dates as functions with bindings such as [[startTime()]] that would parse just the time of day as string.

Or, maybe I can use this:
https://www.polymer-project.org/2.0/docs/devguide/observers#computed-properties

Actually I'm going to do both since with computed properties I still need a function that returns the right String.

UPDATE: The date format is defined somewhere in moment.js. So this might work: moment().format('[The time is] h:mm:ss a');

==== Data to put in events ====
  * start
  * end
  * displayedName
  * title (= displayedName, c'est pour utiliser avec le scheduler-component - on pourrait ajouter le type un jour, peut-Ãªtre)
  * personId
  * location
  * reminderEmail
  * reminderSms
  * [appointmentTypeId] <- Let's not use this for the moment.

Le JSON peut simplement avoir une collection "events". A noter qu'au niveau du scheduler-component, displayedName = title.

==== Calender resizing ====
I need to detect the display size to react to it by displaying only one day on mobile.

==== The language issue ====
I had to add a script tag in the scheduler-component, this is the beginning of the file, the new line is the "local-all.js" import. You could import just some specific locales or all of them.

<code>
<link rel="import" href="../polymer/polymer-element.html">
<link rel="import" href="categories-element.html">
<script src="../jquery/dist/jquery.min.js"></script>
<script src="../moment/min/moment.min.js"></script>
<script src="../fullcalendar/dist/fullcalendar.min.js"></script>
<script src="../fullcalendar/dist/locale-all.js"></script>
</code>

==== TODO ====
  * Test a 1.0 element like the scheduler thingy, see if I can control it from the ES6 code.
    * Check if it works on mobile and on Firefox.
  * Add to README or something that scheduler-component has to be edited or import that component in another way (probably putting it in src).
