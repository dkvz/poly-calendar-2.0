====== Project Notes ======
I need to set the events array for the calendar to something like this:
<code>
events='[
            {"title" : "event1", "start" : "2017-08-06T09:00:00", "end" : "2017-08-06T09:30:00", "otherStuff" : "This working?"},
            {"title" : "event1", "start" : "2017-08-06T14:00:00", "end" : "2017-08-06T14:30:00", "otherStuff" : "This working also?"},
            {"title" : "event2", "start" : "2017-08-15T12:30:00", "end" : "2017-08-15T13:30:00", "otherStuff" : "This working too?"}
            ]'
</code>
In this example I got two for the same day.

===== Problems with the calendar =====

  * The time is not in 24h format when parsing it in the calendar-appointment details view.
  * Does the calendar allow having two events at the same time? How is that displayed? We should be able to select the individual event.

==== Fixed  ====
* Uses "9p" for 9PM, I need another format.
  * Fixed with locale.
* Doesn't show the end time for events. Though I'm not certain I actually need it.
  * Solved. I need the "week view."
* Error in console: Uncaught TypeError: Cannot read property 'addEventListener' of null at setTimeout (scheduler-component.html:262)
  * Seems to have vanished with update.
* The text is in english, though that may be because my OS is in english as well. I need to check that.
  * Fixed with locale.
* A scollbar appears in agendaWeek view mode. I already have the document scrollbar, that's too many scrollbars. This is supposed to be fixed on the latest commit (not the latest version), I might be able to apply the "fix" myself.
  * Fixed by using the last version of the component as a submodule in src.
* We need to intercept when the displayed date range changes.
  * This should be it: date-range-changed

===== The start / end issue =====
The scheduler-component saves time in a special object type. Thing is I have to give start and end as a String to my other components.

To show it like so:
2017-10-06T09:00:00

I can use: e.detail.calEvent.start.format() (assuming I'm in a click event related to the scheduler-component).

I'm not sure if it is the classic JS Date object, doesn't look like it is.

I can format manually using start.day, start.hour, etc.

In my custom components I could reference the parsed dates as functions with bindings such as [[startTime()]] that would parse just the time of day as string.

Or, maybe I can use this:
https://www.polymer-project.org/2.0/docs/devguide/observers#computed-properties

Actually I'm going to do both since with computed properties I still need a function that returns the right String.

UPDATE: The date format is defined somewhere in moment.js. So this might work: moment().format('[The time is] h:mm:ss a');

==== Data to put in events ====
  * start
  * end
  * displayedName
  * title (= displayedName, c'est pour utiliser avec le scheduler-component - on pourrait ajouter le type un jour, peut-être)
  * personId
  * location
  * reminderEmail
  * reminderSms
  * [appointmentTypeId] <- Let's not use this for the moment.

Le JSON peut simplement avoir une collection "events". A noter qu'au niveau du scheduler-component, displayedName = title.

==== Calender resizing ====
I need to detect the display size to react to it by displaying only one day on mobile.

==== The language issue ====
I had to add a script tag in the scheduler-component, this is the beginning of the file, the new line is the "local-all.js" import. You could import just some specific locales or all of them.

<code>
<link rel="import" href="../polymer/polymer-element.html">
<link rel="import" href="categories-element.html">
<script src="../jquery/dist/jquery.min.js"></script>
<script src="../moment/min/moment.min.js"></script>
<script src="../fullcalendar/dist/fullcalendar.min.js"></script>
<script src="../fullcalendar/dist/locale-all.js"></script>
</code>

===== Autocomplete for "person" =====

==== Using paper-autocomplete ====
Install it:
```
bower install --save paper-autocomplete
```
Add the import:
```
<link rel="import" href="../bower_components/paper-autocomplete/paper-autocomplete.html">
```

==== Historical ====
I'm using this component:
```
bower install --save vaadin/vaadin-material-theme vaadin/vaadin-combo-box
```

Which requires two imports:
```
<!-- <link rel="import" href="../bower_components/vaadin-material-theme/vaadin-combo-box.html"> -->
<link rel="import" href="../bower_components/vaadin-combo-box/vaadin-combo-box.html">
```
The first file actually doesn't exist which is why I commented it out. I still think it can't hurt to install vaadin-material-theme. I guess it's the default theme.

The documentation is here: https://vaadin.com/elements/vaadin-combo-box/

We're going to need an iron-ajax dedicated to that component.

To show the birthdate right after the person first and last name I'm going to need a custom display template:
```
<vaadin-combo-box items='[{"label": "Hydrogen", "value": "H"}]'>
  <template>
    [[index]]: [[item.label]] <b>[[item.value]</b>
  </template>
</vaadin-combo-box>
```

The value property is set to the toString of the selected item or what is written in the control.
However, I'm going to need .getSelected() to find the actual item with full information.

-> What happens if I select something, then enter my own value? What does getSelected() return?

About events, "change" appears to be when someone selects or clear an existing list value, and "valueChanged" what we need. Will have to confirm.

-> value-changed doesn't help, it's only called when the user leaves the combobox or presses enter (or selects something I suppose).
-> Doesn't help as well. I need a listener on the bound value property, hoping that will work.

Apparently there's no way to bind a text value change easily.
Relevant: https://github.com/vaadin/vaadin-combo-box/issues/284

We could bind the inner input element value and that would work. I'm switching to paper-autocomplete as it will also look better.

===== Other issues =====
  * Style des boutons "raised" ne fonctionne pas: c'est dû à l'utilisation d'une version de paper-styles < 2.0. Bien que la version 2+ soit dans bower.json, il faut apparemment manuellement faire un ''bower install paper-styles''.
    * -> Il faudrait vérifier si ça se passe normalement en faisant un bower install initial après un clone du repo.

===== TODO =====
  * Test a 1.0 element like the scheduler thingy, see if I can control it from the ES6 code.
    * Check if it works on mobile and on Firefox.
  * Add to README or something that scheduler-component has to be edited or import that component in another way (probably putting it in src).
  * Add a control to change the calendar view.
  * Catch escape key presses on dialogs to close them.
  * Clicking outside a non-edit dialog to close it?
  * Add a refresh button somewhere to reload the current range of events.
  * Add a spinner when loading events.
  * Fix all the warnings issues by "polymer lint".
  * There is a new way to do dom-if, look for all my uses of it to fix (on Polymer 2 elements).
  * Aucunes de mes boites de dialogue ne scroll.
  * Permettre de submit le formulaire login avec Enter.
  * The calendar view should collapse earlier than it does. It's not going to look good on tablets right now.
  * In all the event edition stuff, the presence a valid eventId can replace the "newAppointment" boolean.
  * The zones with <paper-dialog-scrollable> should be moved to not include the controls. But they still have to be a direct parent of the dialog.
  * If I edit an appointment I need to check if the first detail screen also gets updated.
  * I might not need the patchOverlay thing in appointment-edit-dialog (and possibly other dialogs).
  * The layout of my dialog is horrible. I need a more streamlined approach, possibly using float and combinations of block, inline etc. instead of multiple flex layouts.
  * Minimum and maximum day times could be configurable somewhere. It's min-time and max-time on the scheduler-component.
  * We should probably disable the form or the save button or something when we're saving the data from the appointment-edit-dialog. What I'm going to do now is check if the iron-ajax is loading before making the request.
  * BACKEND: add a parameter to token generation to make it long term or short term.
  * BACKEND: token generation POST request could return expires, not necessary for the app though.
